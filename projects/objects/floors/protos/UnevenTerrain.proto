#VRML_SIM R2021b utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# tags: nonDeterministic
# Randomly generated uneven terrain based on Perlin noise.
# template language: javascript

PROTO UnevenTerrain [
  field SFVec3f    translation    0 0 0
  field SFRotation rotation       0 1 0 0
  field SFString   name           "uneven terrain"
  field SFVec3f    size           50 5 50                                                            # Defines the size of the terrain.
  field SFInt32    xDimension     50                                                                 # Defines the number of points in the grid height array in the x direction.
  field SFInt32    zDimension     50                                                                 # Defines the number of points in the grid height array in the y direction.
  field SFNode     appearance     SandyGround { textureTransform TextureTransform { scale 50 50 } }  # Defines the appearance of the terrain.
  field SFInt32    randomSeed     1                                                                  # Defines the seed of the random number generator. A value smaller or equal to 0 sets a random seed.
  field SFBool     flatCenter     FALSE                                                              # Defines whether the center of the terrain should be flat.
  field SFBool     flatBounds     FALSE                                                              # Defines whether the bounds of the terrain should be flat.
  field SFInt32    perlinNOctaves 3                                                                  # Defines the number of octaves of the perlin noise.

  # Deprecated in Webots R2019a
  deprecatedField MFString   texture        "textures/sand.jpg"
  # Deprecated in Webots R2020b
  deprecatedField SFVec2f    textureScale   1.0 1.0
]
{
  %{
    // reference: https://stackoverflow.com/a/42543313/2210777
    import * as wbrandom from 'modules/webots/wbrandom.js';

    if (fields.randomSeed.value <= 0) {
      wbrandom.seed(Date.now());
    else
      wbrandom.seed(fields.randomSeed.value);

    function gaussian2d(x, y, amp, cx, cy, sx, sy) {
      return amp * Math.exp( - ( ( Math.pow(x - cx, 2) / (2.0 * Math.pow(sx, 2)) ) + (Math.pow(y - cy, 2) / (2.0 * Math.pow(sy, 2)) ) ));
    }

    // create 256 shuffled numbers repeated twice.
    let perm = [];
    for (let i = 1; i <= 256; ++i)
      perm.splice(wbrandom.integer(i), 0, i);
      
    console.log(perm);

    for (let i = 0; i < 256; ++i)
      perm.push(perm[i]);

    // generate 256 directions
    let dirs = [];
    for (let a = 0; a < 256); ++a)
      dirs.push([Math.cos(a * 2.0 * Math.PI / 256), Math.sin(a * 2.0 * Math.PI / 256)]);

    function noise(x, y, per) {
      function surflet(grid_x, grid_y) {
        let dist_x = Math.abs(x - grid_x);
        let dist_y = Math.abs(y - grid_y);
        let poly_x = 1 - 6 * Math.pow(dist_x, 5) + 15 * Math.pow(dist_x, 4) - 10 * Math.pow(dist_x, 3);
        let poly_y = 1 - 6 * Math.pow(dist_y, 5) + 15 * Math.pow(dist_y, 4) - 10 * Math.pow(dist_y, 3);
        let hashed = perm[(perm[Math.floor(grid_x) % per] + Math.floor(grid_y) % per) + 1]
        local grad = (x - grid_x)  * dirs[hashed][1] + (y - grid_y) * dirs[hashed][2]
        return poly_x * poly_y * grad
      }
      local int_x, int_y = math.floor(x), math.floor(y)
      return surflet(int_x + 0, int_y + 0) + surflet(int_x + 1, int_y + 0) +
        surflet(int_x + 0, int_y + 1) + surflet(int_x + 1, int_y + 1)
    }

    local function fBm(x, y, per, octs)  -- Fractional Brownian motion
      local val = 0
      for o = 0, octs - 1 do
        val = val + (0.5 ^ o * noise(x * 2 ^ o, y * 2 ^ o, per * 2 ^ o))
      end
      return val
    end

    local perlinSize = 128
    local nOctave = fields.perlinNOctaves.value

    local size = fields.size.value
    
    local xDimension = fields.xDimension.value
    if xDimension < 2 then
      xDimension = fields.xDimension.defaultValue
      io.stderr:write("'xDimension' should be at least equalt to 2.\n")
    end
    
    local zDimension = fields.zDimension.value
    if zDimension < 2 then
      zDimension = fields.zDimension.defaultValue
      io.stderr:write("'zDimension' should be at least equalt to 2.\n")
    end
  }%
  Solid {
    translation IS translation
    rotation IS rotation
    children [
      DEF UNEVEN_TERRAIN_ELEVATION_GRID Transform {
        translation %{= - size.x / 2 }% 0 %{= - size.z / 2 }%
        children [
          Shape {
            appearance IS appearance
            geometry ElevationGrid {
              %{ if xDimension > 2 and zDimension > 2 then }%
                xDimension IS xDimension
                xSpacing %{= size.x / (xDimension - 1) }%
                zDimension IS zDimension
                zSpacing %{= size.z / (zDimension - 1) }%

                height [
                  %{ for i=0, xDimension - 1 do }%
                    %{ for j=0, zDimension - 1 do }%
                      %{
                        local height = 1.0
                        local x = i / xDimension
                        local z = j / zDimension
                        if nOctave > 0 then
                          height = 0.5 * (1.0 + fBm(x, z, perlinSize, nOctave))
                        end
                        if fields.flatCenter.value then
                          height = height * (1.0 - gaussian2d(x - 0.5, z - 0.5, 1, 0, 0, 0.2, 0.2))
                        end
                        if fields.flatBounds.value then
                          height = height * gaussian2d(x - 0.5, z - 0.5, 1, 0, 0, 0.2, 0.2)
                        end
                        height = height * size.y
                      }%
                      %{= height }%
                    %{ end }%
                  %{ end }%
                ]
              %{ end }%
            }
          }
        ]
      }
    ]
    name IS name
    model "uneven terrain"
    boundingObject USE UNEVEN_TERRAIN_ELEVATION_GRID
  }
}
